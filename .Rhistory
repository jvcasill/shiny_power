density(x)
hist(x, breaks = 20, prob = TRUE,
main = "",
cex.main = 0.75, cex.lab = 0.75, cex.axis = 0.75,
xlab = "")
lines(density(x), lty = 1, lwd = 1.5, col = "blue")
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(20, 40)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 1)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 5),
mua = slider(30, 35, step = 1, initial = 35),
n = slider(1, 100, step = 1, initial = 25),
alpha = slider(0.01, 0.1, step = 0.01,
initial = 0.05))
# power.t.test(n = 16, delta = 2, sd = 4, type = 'one.sample', alt = 'one.sided')$power
library(manipulate); library(ggplot2)
mu0 = 0
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(-10, 10)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 1, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 1, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 1)
g
}
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 5),
mua = slider(-10, 10, step = 1, initial = 5),
n = slider(1, 100, step = 1, initial = 25),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
?power.t.test
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
?power.t.test
shiny::runApp('shiny_power')
power.t.test(n = 20, delta = 1)
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
power.t.test(n = 20, delta = 1)
library(xtab)
library(xtabs)
library(xtable)
xtabs(power.t.test(n = 20, delta = 1))
?xtabs
xtable(power.t.test(n = 20, delta = 1))
?xtable
hi <- xtable(power.t.test(n = 20, delta = 1))
str(power.t.test(n = 20, delta = 1))
unlist(power.t.test(n = 20, delta = 1))
stargazer(power.t.test(n = 20, delta = 1)
)
stargazer(power.t.test(n = 20, delta = 1), type = 'html')
power.t.test(n = 20, delta = 1)$n
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
shiny::runApp('shiny_power')
?power.t.test
shiny::runApp('shiny_power')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
shiny::runApp('shiny_df')
install.packages(c("mboost", "MuMIn", "mvtnorm"))
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(Fruits)
M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
## Not run:
plot(M)
str(Fruits)
data(Fruits)
M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Sales")
## Not run:
plot(M)
head(Fruit)
str(Fruit)
head(Fruits)
Fruits
data(Fruits)
M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
## Not run:
plot(M)
rnorm(100, 10, 2)
c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
c(rep("NS", each = 30), rep("NE", each = 20))
c(
rep("week1", each = 10)
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
c(votNS, votNE)
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
vot <- c(votNS, votNE)
group <- c(rep("NS", each = 30), rep("NE", each = 20))
week <- c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
df <- data.frame(group = group, week = week, vot = vot)
c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
rep("week1", each = 10, by = 2)
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
vot <- c(votNS, votNE)
group <- c(rep("NS", each = 60), rep("NE", each = 60))
weekNS <- c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
weekNE <- c(
rep("week1", each = 10),
rep("week2", each = 10),
rep("week3", each = 10),
rep("week4", each = 10),
rep("week5", each = 10),
rep("week6", each = 10))
week <- c(weekNS, weekNE)
df <- data.frame(group = group, week = week, vot = vot)
df
M <- gvisMotionChart(df, idvar="group", timevar="week")
## Not run:
plot(M)
M <- gvisMotionChart(df, idvar="group", timevar="week")
plot(M)
str(Fruits)
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 25, 7),
rnorm(10, 20, 5))
vot <- c(votNS, votNE)
group <- c(rep("NS", each = 60), rep("NE", each = 60))
weekNS <- c(
rep("2015-7-1", each = 10),
rep("2015-7-8", each = 10),
rep("2015-7-15", each = 10),
rep("2015-7-22", each = 10),
rep("2015-7-29", each = 10),
rep("2015-8-5", each = 10))
weekNE <- c(
rep("2015-7-1", each = 10),
rep("2015-7-8", each = 10),
rep("2015-7-15", each = 10),
rep("2015-7-22", each = 10),
rep("2015-7-29", each = 10),
rep("2015-8-5", each = 10))
week <- c(weekNS, weekNE)
df <- data.frame(group = group, week = week, vot = vot)
df
str(df)
df$week <- as.Date(df$week)
str(df)
M <- gvisMotionChart(df, idvar="group", timevar="week")
plot(M)
aggregate(vot ~ week + group, data = df, FUN = mean)
dfMean <- aggregate(vot ~ week + group, data = df, FUN = mean)
M <- gvisMotionChart(dfMean, idvar="group", timevar="week")
plot(M)
dfMean
votNS <- rnorm(60, 10, 2)
votNE <- c(
rnorm(10, 60, 2),
rnorm(10, 40, 3),
rnorm(10, 40, 10),
rnorm(10, 30, 7),
rnorm(10, 20, 7),
rnorm(10, 15, 5))
vot <- c(votNS, votNE)
group <- c(rep("NS", each = 60), rep("NE", each = 60))
weekNS <- c(
rep("2015-7-1", each = 10),
rep("2015-7-8", each = 10),
rep("2015-7-15", each = 10),
rep("2015-7-22", each = 10),
rep("2015-7-29", each = 10),
rep("2015-8-5", each = 10))
weekNE <- c(
rep("2015-7-1", each = 10),
rep("2015-7-8", each = 10),
rep("2015-7-15", each = 10),
rep("2015-7-22", each = 10),
rep("2015-7-29", each = 10),
rep("2015-8-5", each = 10))
week <- c(weekNS, weekNE)
df <- data.frame(group = group, week = week, vot = vot)
df$week <- as.Date(df$week)
dfMean <- aggregate(vot ~ week + group, data = df, FUN = mean)
M <- gvisMotionChart(dfMean, idvar="group", timevar="week")
plot(M)
Line <- gvisLineChart(df)
plot(Line)
?gvisLineChart()
Line <- gvisLineChart(df, week, vot)
plot(Line)
Line <- gvisLineChart(df, xvar = "week", yvar = "vot")
plot(Line)
Line <- gvisLineChart(df, xvar = "week", yvar = "vot", idvar = "group")
plot(Line)
Line <- gvisLineChart(df, xvar = "group", yvar = "vot")
plot(Line)
df
Line <- gvisLineChart(df, xvar = "group", yvar = c(df[df$group == "NE", 3], df[df$group == "NS", 3])
plot(Line)
c(df[df$group == "NE", 3], df[df$group == "NS", 3]
)
Line <- gvisLineChart(df, xvar = "group", yvar = c(df[df$group == "NE", 3], df[df$group == "NS", 3])
)
Line <- gvisLineChart(df, xvar = "group", yvar = c(df[df$group == "NE", 3], df[df$group == "NS", 3]))
plot(Line)
Line <- gvisLineChart(df, xvar = "week", yvar = "vot")
plot(Line)
df <- data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
# line chart
Line1 <- gvisLineChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Line1)
# line chart
Line1 <- gvisLineChart(dfMean, xvar="week", yvar=c("vot"))
plot(Line1)
Line3 <- gvisLineChart(df, xvar="country", yvar=c("val1", "val2"),
options=list(vAxis="{format:'#,###%'}"))
plot(Line3)
Line4 <-  gvisLineChart(df, "country", c("val1","val2"),
options=list(series="[{targetAxisIndex: 0},
{targetAxisIndex:1}]",
vAxes="[{title:'val1'}, {title:'val2'}]"
))
plot(Line4)
Dashed <-  gvisLineChart(df, xvar="country", yvar=c("val1","val2"),
options=list(
series="[{color:'green', targetAxisIndex: 0,
lineWidth: 1, lineDashStyle: [2, 2, 20, 2, 20, 2]},
{color: 'blue',targetAxisIndex: 1,
lineWidth: 2, lineDashStyle: [4, 1]}]",
vAxes="[{title:'val1'}, {title:'val2'}]"
))
plot(Dashed)
Line1 <- gvisLineChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Line1)
Bar <- gvisBarChart(df)
plot(Bar)
Bar2 <- gvisBarChart(dfMean, xvar="group", yvar="vot")
plot(Bar2)
Column2 <- gvisColumnChart(dfMean, xvar="group", yvar="vot")
plot(Column2)
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("rattle")
install.packages("ISLR")
install.packages("quantmod")
?contr.sum
(cT <- contr.treatment(5))
all(crossprod(cT) == diag(4)) # TRUE: even orthonormal
(cT <- contr.treatment(3))
all(crossprod(cT) == diag(2)) # TRUE: even orthonormal
(cT <- contr.treatment(3))
all(crossprod(cT) == diag(3)) # TRUE: even orthonormal
(cT <- contr.treatment(3))
all(crossprod(cT) == diag(2)) # TRUE: even orthonormal
mat = matrix(c(1, -1, 0, 0, 1, 0, 0, -1, 0), ncol = 2)
mat = matrix(c(1, -1, 0, 0, 1, 0, -1, 0), ncol = 2)
mat
mat = matrix(c(1, -1, 0, 1, 0, -1), ncol = 2)
mat
my.contrasts = mat %*% solve(t(mat) %*% mat)my.contrasts
my.contrasts = mat %*% solve(t(mat) %*% mat)
my.contrasts
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
modFit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
modFit1
library(caret)
modFit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
modFit1
set.seed(33833)
modFit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
modFit1
modFit2 <- train(Species ~ ., data = training, method = "gbm", prox = TRUE)
modFit2
modFit2 <- train(Species ~ ., data = vowel.train, method = "gbm", prox = TRUE)
modFit2
modFit2 <- train(y ~ ., data = vowel.train, method = "gbm", prox = TRUE)
modFit2
modFit1$finalModel
modFitRF      <- randomForest(y ~. , data = vowel.train)
modFitRF
predictionsRF <- predict(modFitRF, testing, type = "class")
predictionsRF <- predict(modFitRF, vowel.test, type = "class")
confusionMatrix(predictionsRF, testing$y)
confusionMatrix(predictionsRF, vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
set.seed(62433)
modFitRF      <- randomForest(diagnosis ~. , data = testing)
predictionsRF <- predict(modFitRF, testing, type = "class")
confusionMatrix(predictionsRF, testing$diagnosis)
mod1 <- train(diagnosis ~ ., method = "glm", data = training)
mod2 <- train(diagnosis ~ ., method = "rf", data = training, trControl = trainControl(method = "cv"), numbers = 3)
mod3 <- train(diagnosis ~ ., method = "lda", data = training, trControl = trainControl(method = "cv"), numbers = 3)
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
pred3 <- predict(mod2, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
combPred
confusionMatrix(combPred, testing$diagnosis)
pred1
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
mod1 <- train(diagnosis ~ ., method = "rf", data = training)
mod2 <- train(diagnosis ~ ., method = "gbm", data = training, trControl = trainControl(method = "cv"), numbers = 3)
mod3 <- train(diagnosis ~ ., method = "lda", data = training, trControl = trainControl(method = "cv"), numbers = 3)
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
pred3 <- predict(mod2, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
mod1 <- train(diagnosis ~ ., method = "rf", data = training)
mod2 <- train(diagnosis ~ ., method = "gbm", data = training)
mod3 <- train(diagnosis ~ ., method = "lda", data = training)
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
pred3 <- predict(mod2, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("sensR")
install.packages("vowels")
library("tikzDevice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("phonR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("CORElearn", "digest", "googleVis", "httr", "manipulate", "rattle", "rmarkdown", "rstudioapi"))
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("hexbin")
cite(lmerTest)
cite("lmerTest")
library("lmerTest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
cite("lmerTest")
cite(lmerTest)
x <- citation(lmerTest)
toBibtex(x)
citation(lmerTest)
citation()
citation(lme4)
citation(package = lme4)
citation(package = "lme4")
citation("lme4")
citation("")
citation()
install.packages(c("codetools", "devtools", "Formula", "googleVis", "knitr", "manipulate", "Matrix", "pscl", "Rcpp", "sensR", "shiny", "UsingR"))
setwd("~/code/shiny_apps/shiny_bivariate_regression")
shiny::runApp()
install.packages("shinythemes")
setwd("~/code/shiny_apps/shiny_crossOver")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/code/shiny_apps/shiny_power")
shiny::runApp()
shiny::runApp()
